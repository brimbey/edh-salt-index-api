AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@8.1.3 on 2022-08-03T05:27:54.981Z
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            - s3:ListBucket
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: DataTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: DataTable
          - Effect: Deny
            Action: dynamodb:DeleteTable
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
  DataParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: data
      Value:
        Ref: DataTable
  StaticBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Value:
        Ref: StaticBucket
  StaticFingerprintParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Value: 'false'
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
            - {}
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*/*
            - {}
      Roles:
      - Ref: Role
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /card:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCardHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsCardHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /import:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetImportHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsImportHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /init:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInitHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsInitHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /leaderboard:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLeaderboardHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsLeaderboardHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /stats:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStatsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsStatsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCatchallHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /persist:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPersistHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsPersistHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /_static/{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '1.0'
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub:
                  - https://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                connectionType: INTERNET
                timeoutInMillis: 30000
  GetCardHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/5771d60efd8dbeed0550b92a01496d75
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetCardHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /card
            Method: GET
            ApiId:
              Ref: HTTP
  GetImportHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/c331ac5672692a23eaab3c34a3faa723
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetImportHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /import
            Method: GET
            ApiId:
              Ref: HTTP
  GetInitHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/781eaf311858cc83a867eb347fbef459
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetInitHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /init
            Method: GET
            ApiId:
              Ref: HTTP
  GetLeaderboardHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/a8f46bc2dd347cda2d6325f554b2c655
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetLeaderboardHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /leaderboard
            Method: GET
            ApiId:
              Ref: HTTP
  GetStatsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/5bc95b89acad0f557084973c11db3307
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetStatsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stats
            Method: GET
            ApiId:
              Ref: HTTP
  GetCatchallHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/7cfcebe29741a256fa6c4126b4818ccf
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetCatchallHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: GET
            ApiId:
              Ref: HTTP
  PostPersistHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/a9f07e2207a071019c3433f6491b4d9e
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostPersistHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /persist
            Method: POST
            ApiId:
              Ref: HTTP
  OptionsCardHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsCardHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /card
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  OptionsImportHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsImportHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /import
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  OptionsInitHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsInitHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /init
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  OptionsLeaderboardHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsLeaderboardHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /leaderboard
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  OptionsPersistHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsPersistHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /persist
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  OptionsStatsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://commandersalt-api-cfn-deployments-71882/894937bbfdd36ec98ae4697fb410bc92
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: commandersalt-api
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsStatsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stats
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: category
        KeyType: HASH
      - AttributeName: id
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: category
        AttributeType: S
      - AttributeName: id
        AttributeType: S
      - AttributeName: salt
        AttributeType: N
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: bySalt
        KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: salt
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: byId
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: byStats
        KeySchema:
        - AttributeName: category
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${bukkit}/*
            - bukkit:
                Ref: StaticBucket
          Sid: PublicReadGetObject
Outputs:
  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
